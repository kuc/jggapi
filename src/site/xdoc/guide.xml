<?xml version="1.0"?>
<document>

    <properties>
        <title>JGGApi Guide</title>
        <author>Mateusz Szczap</author>
    </properties>

    <body>
		<title><H1>JGGApi Guide</H1></title>
        <section name="Induction">
				<p>
				JGGApi is a library that was designed to be used by high-level developers. It handles low-level
				binary Gadu-Gadu protocol implementation. High-level developers can use well described interfaces to interact
				with Gadu-Gadu server as most of complicated protocol details is hidden. 
				</p>			
				<p>
				One of the most important class in JGGApi is a <code>Session</code> class. It is an entry point to so-called JGGApi services:
				</p>
				<p>
				<b>JGGApi services:</b>
				<ul>
					<li>IConnectionService - connecting and disconnecting.</li>
					<li>ILoginService - logging and logging out.</li>
					<li>IMessageService - sending and receiving messages.</li>
					<li>IPresenceService - updating own status and listening for changes of statuses of users from buddy list.</li>
					<li>IPublicDirectoryService - searching in public directory service, reading and writing personal information.</li>
					<li>IContactListService - importing and exporting of contact list.</li>
					<li>IRegistrationService - registering and unregistering new account, changing password, sending forgotten password by e-mail.</li>
				</ul>
				</p>
		</section>
		<section name="Session lifecycle">
				<p>
				<code>Session</code> can be in various states. We can check current <code>SessionState</code>
				by invoking <code>getSessionState()</code> method on <code>Session</code> object.
				</p>
				<source>
<![CDATA[
ISession session = ...
SessionState sessionState = session.getSessionState();				
]]>
				</source>
				<p>
				<b>List of all available session states:</b>
				<ul>
					<li>SessionState.CONNECTION_AWAITING</li>
					<li>SessionState.CONNECTING</li>
					<li>SessionState.CONNECTED</li>
					<li>SessionState.AUTHENTICATION_AWAITING</li>
					<li>SessionState.LOGGED_IN</li>
					<li>SessionState.DISCONNECTING</li>
					<li>SessionState.DISCONNECTED</li>
					<li>SessionState.LOGGED_OUT</li>
					<li>SessionState.CONNECTION_ERROR</li>
				</ul>
				</p>
				<p>
				After session creation, <code>Session</code> instance is in <code>SessionState.CONNECTION_AWAITING</code>.
				When <code>connect()</code> method is invoked session state changes to <code>SessionState.CONNECTING</code>.
				After connection to Gadu-Gadu server is established the session state changes to <code>SessionState.CONNECTED</code>.
				Next phase is the authentication of user, therefore session state is in <code>SessionState.AUTHENTICATION_AWAITING</code>.
				After logging in session changes to <code>SessionState.LOGGED_IN</code>.
				</p>
				<p>
				In <code>SessionState.LOGGED_IN</code> it is possible to send messages, change status,
				import, export contact list and search information in public directory. Basically, it means
				session is ready for interaction with Gadu-Gadu server.
				</p>
				<p>
				When there is an unexpected error that occurs during interaction with Gadu-Gadu server session
				state changes to <code>SessionState.CONNECTION_ERROR</code> and this means you can disconnect from server.
				</p>
				<p>
				If you want to be notified of session state changes you can register as <code>SessionStateLister</code>
				in <code>Session</code> object.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
session.addSessionStateListener(new SessionStateListener() {
	public void sessionStateChanged(final SessionState oldSessionState, final SessionState newSessionState) {
		//add handling here
	}
});
]]>
				</source>
				</p>
			</section>
			<section name="Connecting and disconnecting">
				<p>
				Create <code>Session</code> object by invoking static method on SessionFactory.
				After that create a <code>LoginContext</code> instance. <code>LoginContext</code> contains various information that are
				of high importance in logging process. It holds Gadu-Gadu uin and password for it.
				In addition, it has information about initial status, maximal image size that the user
				accepts and initial list of monitored users. Note that monitored users list also includes
				list of users that are banned, ie. the ones from which we do not wish to receive any notification and messages.
				</p>
				<p>		
				In order to connect to Gadu-Gadu server you have to use <code>ConnectionService</code>
				that can be referenced from previously created <code>Session</code> object.		
				After that add <code>ConnectionListener</code> to listen for connection related events and finally
				invoke <code>connect()</code> method on <code>ConnectionService</code>.
				</p>
				<p>
				<b>Code snippet:</b>
				<source>
<![CDATA[
final ISession session = SessionFactory.createSession();
final LoginContext loginContext = new LoginContext(1336843, "dupadupa");
session.getConnectionService().addConnectionListener(new ConnectionListener.Stub() {
	public void connectionEstablished() throws GGException {
		System.out.println("Connection established.");
	}
});
session.getConnectionService().connect();
]]>
				</source>
				</p>
				<p>
				The code above code snippet establishes socket connection to Gadu-Gadu server. It is important to note that it does
				<b>NOT</b> log in user. When connection to server is successful, <code>connectionEstablished()</code> method
				from connection handler class is invoked and SessionState changes to <code>SessionState.AUTHENTICATION_AWAITING</code>.
				</p>
				<p>
				In order to disconnect from Gadu-Gadu server you have to invoke <code>disconnect()</code> method
				on <code>ConnectionService</code>. After that connection handler class that implements
				<code>ConnectionListener</code> interface is notified and <code>connectionClosed()</code>
				method is invoked. After listener method is triggered the SessionState changes to DISCONNECTED.
				It is important to notice that disconnect method can always be invoked, regardless of the current session state. 
				</p>
				<p>
				<b>Code snippet:</b>
				<source>
final ISession session = SessionFactory.createSession();
session.getConnectionService().addConnectionListener(new ConnectionListener.Stub() {
	public void connectionClosed() throws GGException {
		System.out.println("Connection closed.");
	}
});
session.getConnectionService().disconnect();
				</source>
				</p>
			</section>
			<section name="Logging in and logging out">
				<p>
				In order to log in connection to Gadu-Gadu server must be established. Session state must be in <code>SessionState.AUTHENTICATION_AWAITING</code> mode.
				</p>
				<p>
				In order to log in you will have to use <code>LoginService</code> previously obtained
				from <code>Session</code> instance. 
				In addition, you will need to create a <code>LoginContext</code> instance.
				<code>LoginContext</code> contains various information that are of high importance in logging process. It holds Gadu-Gadu uin and password for it.
				What is more, it has information about initial status, maximal image size that the user
				accepts and initial list of monitored users. Note that monitored users list also includes
				list of users that are banned, ie. the ones from which we do not wish to receive any notification or messages.
				</p>
				<p>
				You can add <code>LoginListener</code> to be notified of login related events. If your uin
				and password match and you will be successfuly authenticated, to let you know about this,
				<code>loginOK()</code> method will be triggered. In case authentication process was not successful,
				you will be notified of this through invocation of <code>loginFailed()</code> method on
				<code>LoginListener</code>.
				The <code>LoginFailedEvent</code> object contains cause of unsuccessful login.
				</p>
				<p>
				<b>Code snippet:</b>
				<source>
<![CDATA[
ISession session = ...
ILoginService loginService = session.getLoginService();
loginService.addLoginListener(new LoginListener.Stub() {
	public void loginOK() throws GGException {
		System.out.println("Login OK.");
	}
	public void loginFailed(final LoginFailedEvent loginFailedEvent) throws GGException {
		System.out.println("Login Failed.");
	}
});
]]>
				</source>
				</p>
				<p>
				If you want to log out from Gadu-Gadu server you have to invoke <code>logout()</code>
				method on <code>LoginService</code>. After doing that status will be set to unavailable
				and there will be no way to send messages or interact with Gadu-Gadu server whatsoever.
				The session state will change in such situation to <code>SessionState.LOGGED_OUT</code>.
				</p>
				<p>
				Alternatively, you can invoke <code>logout(java.lang.String description, java.lang.Date returnDate)</code>
				passing your description that will be set when status is unavailable and/or your anticipated
				return time. If you do not wish to pass your return time you are free to pass <code>null</code>
				as a second parameter.
				</p>
				<p>
				<b>Code snippet:</b>
				<source>
<![CDATA[
ISession session = ...
ILoginService loginService = session.getLoginService();
loginService.logout();
]]>
				</source>
				Alternative appoach:
				<source>
<![CDATA[
ISession session = ...
ILoginService loginService = session.getLoginService();
loginService.logout("Vegetarians rocks! Wake up, stop killing animals!", null);
]]>
				</source>
				</p>
			</section>
			<section name="Sending and receiving messages">
				<p>
				In order to send and receive messages you have to use <code>MessageService</code>
				that similarly to previous services can be obtained from <code>Session</code> object.
				Before sending, an outgoing message has to be created. There is a <code>OutgoingMessage</code>
				class that has three static methods to create it's instance.
				The most common static method is: <code>OutgoingMessage.createNewMessage(int, java.lang.Sting)</code>.
				</p>
				<p>
				The above method simply creates a new <code>OutgoingMessage</code> instance.
				The first parameter is the number of recipient and the second one is the body of the
				message to be send.
				</p>
				<p>
				After creating <code>OutgoingMessage</code> object you can send it through <code>MessageService</code>.
				In order to do it you have to invoke <code>sendMessage(IOutgoingMessage outgoingMessage)</code> method from <code>MessageService</code>.
				</p>
				<p>
				<b>Code snippet:</b>
				<source>
<![CDATA[
ISession session = ...
IMessageService messageService = session.getMessageService();
OutgoingMessage outMessage = OutgoingMessage.createNewMessage(176798, "body");
messageService.sendMessage(outMessage);
]]>
				</source>
				</p>
				<p>
				If you want to be notified of message related events you have to register <code>MessageListener</code>
				in <code>MessageService</code>.
				</p>
				<p>
				<b>Code snippet:</b>
				<source>
<![CDATA[
final ISession session = ...
final IMessageService messageService = session.getMessageService();
messageService.addMessageListener(new MessageListener.Stub() {
	public void messageArrived(IIncommingMessage incommingMessage) {
		System.out.println("MessageArrived, from user: "+incommingMessage.getUin());
		System.out.println("MessageBody: "+incommingMessage.getMessageBody());
		System.out.println("MessageID: "+incommingMessage.getMessageID());
		System.out.println("MessageStatus: "+incommingMessage.getMessageClass());
		System.out.println("MessageTime: "+incommingMessage.getMessageDate());
	}
});
]]>
				</source>
				</p>
				<p>
				There is also possibilty to receive confirmation whether a certain outgoing message
				was delivered. In order to do that you have to register as <code>MessageListener</code>
				in <code>MessageService</code>. When message is delivered JGGApi will notify you though invocation
				of <code>messageDelivered(int uin, int messageID, MessageStatus deliveryStatus)</code> method in <code>MessageListener</code>
				The message can be identified by an unique <code>messageID</code> which is generated when you creates an instance of <code>OutgoingMessage</code>.
				</p>
				<p>
				<b>Code snippet:</b>
				<source>
<![CDATA[
ISession session = ...
IMessageService messageService = session.getMessageService();
messageService.addMessageListener(new MessageListener.Stub() {
	public void messageDelivered(int uin, int messageID, MessageStatus deliveryStatus) {
		System.out.println("MessageDelivered, fromUser: "+String.valueOf(uin));
		System.out.println("MessageDelivered, messageID: "+String.valueOf(messageID));
		System.out.println("MessageDelivered, messageStatus: "+deliveryStatus);
	}
});
OutgoingMessage outMessage = OutgoingMessage.createNewMessage(176798, "body");
messageService.sendMessage(outMessage);
]]>
				</source>
				</p>
		</section>
    </body>
</document>