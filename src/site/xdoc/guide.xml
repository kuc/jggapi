<?xml version="1.0"?>
<document>

    <properties>
        <title>JGGApi</title>
        <author>Mateusz Szczap</author>
    </properties>

    <body>
		<title>Getting Started with JGGApi</title>
        <section name="Getting Started with JGGApi">

			<subsection name="Creating session">
				<p>
				The first thing that must be done is creation of <code>LoginContext</code>
				object that is necessary to create <code>Session</code> object.
				LoginContext contains various information that are of high importance in logging
				process. The most important values it holds are Gadu-Gadu number also known as
				uin and password for that number/uin.
				</p>
				<p>
				What is more, it contains information about initial status, local and remote IP addresses, maximal image size that
				the user accepts and initial list of monitored users. Note that monitored users list
				also includes list of users that are banned.
				</p>
				<p>
				<code>Session</code> object is the most important object that is an entry point to
				various Gadu-Gadu services. After creating <code>LoginContext</code>
				instance SessionFactory can be used in order to fabricate the <code>Session</code>
				instance. It simply looks up default server for uin, creates <code>Server</code> object
				and associates it with <code>Session</code> instance.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
LoginContext loginContext = new LoginContext(376798, "foo");
ISession session = SessionFactory.createSession(loginContext);
]]>
				</source>
				</p>
				<p>
				Thanks to the session instance it is possible to access various services such as:
				<ul>
					<li>ConnectionService - connecting and disconnecting.</li>
					<li>LoginService - logging and logging out.</li>
					<li>MessageService - sending and receiving messages.</li>
					<li>PresenceService - updating own status and listering for changes of monitored users status.</li>
					<li>IPublicDirectoryService - searching in public directory service, reading and writing personal information.</li>
					<li>IContactListService - importing and exporting of contact list.</li>
				</ul>
				</p>
			</subsection>
			
			<subsection name="Session lifecycle">
				<p>
				<code>Session</code> can be in various states. We can check actual <code>SessionState</code>
				by invoking getSessionState method on <code>Session</code> object.
				</p>
				<source>
<![CDATA[
ISession session = ...
SessionState sessionState = session.getSessionState();				
]]>
				</source>
				<p>
				List of all available session states:
				<ul>
					<li>SessionState.CONNECTION_AWAITING</li>
					<li>SessionState.CONNECTING</li>
					<li>SessionState.CONNECTED</li>
					<li>SessionState.AUTHENTICATION_AWAITING</li>
					<li>SessionState.LOGGED_IN</li>
					<li>SessionState.DISCONNECTING</li>
					<li>SessionState.DISCONNECTED</li>
					<li>SessionState.LOGGED_OUT</li>
					<li>SessionState.CONNECTION_ERROR</li>
				</ul>
				</p>
				<p>
				After creation session is in <code>SessionState.CONNECTION_AWAITING</code>.
				When connect method is invoked session is in <code>SessionState.CONNECTING</code>.
				When connection to Gadu-Gadu server is established the session state becomes <code>SessionState.CONNECTED</code>.
				Next phase is the authentication of a user therefore session state is <code>SessionState.AUTHENTICATION_AWAITING</code>.
				After logging in session is in <code>SessionState.LOGGED_IN</code>.
				</p>
				<p>
				In <code>SessionState.LOGGED_IN</code> it is possible to send messages, to change status,
				import, export contact list and search information in public directory.
				</p>
				<p>
				When there is an unexpected error that occurs during interaction with Gadu-Gadu server session
				state is in <code>SessionState.CONNECTION_ERROR</code> and this means one can disconnect from server.
				</p>
				<p>
				If one wants to be notified of session state changes one has to register as <code>SessionStateLister</code>
				in <code>Session</code> object.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
session.addSessionStateListener(new SessionStateListener() {
public void sessionStateChanged(SessionState oldSessionState, SessionState newSessionState) {
	//add handling here
}
});
]]>
				</source>
				</p>
			</subsection>
			
			<subsection name="Connecting and disconnecting from Gadu-Gadu server">
				<p>
				In order to connect to Gadu-Gadu server one has to use <code>ConnectionService</code>
				that can be accessed from previously created <code>Session</code> object.
				The code below just simply establishes connection to Gadu-Gadu server.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[	
ISession session = ...
IConnectionService connectionService = session.getConnectionService();
connectionService.connect();
]]>
				</source>
				</p>
				<p>
				If we want to be notified whether connection has been established we can be notified
				of it through handler class that implements <code>ConnectionListener</code> interface.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
IConnectionService connectionService = session.getConnectionService();
connectionService.addConnectionListener(new ConnectionListener.Stub() {
public void connectionEstablished() {
	System.out.println("Connection established.");
}
	
public void connectionClosed() {
	System.out.println("Connection closed.");
}
	
public void connectionError(Exception ex) {
	System.out.println("Connection Error: "+ex.getMessage());
}
});
connectionService.connect();
]]>
				</source>
				</p>
				<p>
				Disconnection from Gadu-Gadu server can be realized by invoking disconnect method
				on <code>ConnectionService</code>. After invoking this method connection handler
				that implements <code>ConnectionListener</code> interface is notified and 
				connectionClosed method is invoked.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
IConnectionService connectionService = session.getConnectionService();
connectionService.addConnectionListener(new ConnectionListener.Stub() {
	public void connectionEstablished() {
		System.out.println("Connection established.");
	}
	public void connectionClosed() {
		System.out.println("Connection closed.");
	}
	public void connectionError(Exception ex) {
		System.out.println("Connection Error: "+ex.getMessage());
	}
});
connectionService.disconnect();
]]>
				</source>
				</p>
			</subsection>
	
			<subsection name="Logging in and logging out">
				<p>
				In order to log in connection to Gadu-Gadu server must be established.
				</p>
				<p>
				One can log in using <code>LoginService</code>. If the uin and password match Gadu-Gadu server
				replies that logging was successful or that server did not authenticate. In order to receive such events one has to register in
				<code>LoginService</code> as a login handler that implements <code>LoginListener</code>
				interface.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
ILoginService loginService = session.getLoginService();
loginService.addLoginListener(new LoginListener.Stub() {
	public void loginOK() {
		System.out.println("Login OK.");
	}

	public void loginFailed() {
		System.out.println("Login Failed.");
	}
});
]]>
				</source>
				</p>
				<p>
				If you want to log out from Gadu-Gadu server you have to invoke <code>logout</code>
				method on <code>LoginService</code>. After doing that status will be set to unavailable
				and there will be no way to send messages or interact with Gadu-Gadu server.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
ILoginService loginService = session.getLoginService();
loginService.logout();
]]>
				</source>
				</p>
				<p>
				There is also another method to logout that takes description as a <code>java.lang.String</code>
				and return date as <code>java.util.Date</code>. Please consult Java Docs to get more information on
				this.
				</p>
			</subsection>
					
			<subsection name="Sending and receiving messages">
				<p>
				In order to send and receive messages one has to use <code>MessageService</code>
				that can be accessed via <code>Session</code> object.
				Before sending, an outgoing message has to be created. There is a <code>
				OutgoingMessage</code> class that has three static methods to create it's instance.
				The most common static method is: <code>OutgoingMessage.createNewMessage(176798, "body")</code>
				</p>
				<p>
				The above method simply creates a new <code>OutgoingMessage</code> instance.
				The first parameter is the number of recipient and the second one is the body of the
				message to be send.
				</p>
				<p>
				After creating <code>OutgoingMessage</code> object one can send it through <code>MessageService</code>.
				In order to do it please invoke <code>sendMessage</code> method from <code>MessageService</code>.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
IMessageService messageService = session.getMessageService();
OutgoingMessage outMessage = OutgoingMessage.createNewMessage(176798, "body");
messageService.sendMessage(outMessage);
]]>
				</source>
				</p>
				<p>
				If one wants to receive messages from other users one has to register as a <code>MessageListener</code>
				in <code>MessageService</code>.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
IMessageService messageService = session.getMessageService();
messageService.addMessageListener(new MessageListener.Stub() {
	public void messageArrived(final IncomingMessage incommingMessage) {
		System.out.println("MessageArrived, from user: "+incommingMessage.getUin());
		System.out.println("MessageBody: "+incommingMessage.getMessageBody());
		System.out.println("MessageID: "+incommingMessage.getMessageID());
		System.out.println("MessageStatus: "+incommingMessage.getMessageClass());
		System.out.println("MessageTime: "+incommingMessage.getMessageDate());
	}
});
]]>
				</source>
				</p>
				<p>
				There is also possibilty to receive confirmation whether a certain outgoing message
				was delivered or not. In order to do that one has to register as <code>MessageListener</code>
				in <code>LoginService</code>. After message that was previously sent is delivered Gadu-Gadu sents
				confirmation packet and the client is notified by invocation of <code>messageDelivered</code> method
				from <code>MessageListener</code>. The message can be identified by an unique <code>messageID</code>
				that is generated when one creates <code>OutgoingMessage</code>.
				</p>
				<p>
				Code snippet:
				<source>
<![CDATA[
ISession session = ...
IMessageService messageService = session.getMessageService();
messageService.addMessageListener(new MessageListener.Stub() {
	public void messageDelivered(int uin, int messageID, MessageStatus deliveryStatus) {
		System.out.println("MessageDelivered, fromUser: "+String.valueOf(uin));
		System.out.println("MessageDelivered, messageID: "+String.valueOf(messageID));
		System.out.println("MessageDelivered, messageStatus: "+deliveryStatus);
	}
});
OutgoingMessage outMessage = OutgoingMessage.createNewMessage(176798, "body");
messageService.sendMessage(outMessage);
]]>
				</source>
				</p>
			</subsection>
		</section>
    </body>
</document>